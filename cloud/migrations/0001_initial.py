# Generated by Django 2.1 on 2019-02-20 08:37

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ApiComponentType',
            fields=[
                ('apicomponenttypeid', models.IntegerField(db_column='APIComponentTypeID', primary_key=True, serialize=False)),
                ('apicomponenttypename', models.CharField(blank=True, db_column='APIComponentTypeName', max_length=50, null=True)),
                ('gffsmall', models.FloatField(db_column='GFFSmall')),
                ('gffmedium', models.FloatField(db_column='GFFMedium')),
                ('gfflarge', models.FloatField(db_column='GFFLarge')),
                ('gffrupture', models.FloatField(db_column='GFFRupture')),
                ('gfftotal', models.FloatField(db_column='GFFTotal')),
                ('holecostsmall', models.FloatField(db_column='HoleCostSmall')),
                ('holecostmedium', models.FloatField(db_column='HoleCostMedium')),
                ('holecostlarge', models.FloatField(db_column='HoleCostLarge')),
                ('holecostrupture', models.FloatField(db_column='HoleCostRupture')),
                ('outagesmall', models.FloatField(db_column='OutageSmall')),
                ('outagemedium', models.FloatField(db_column='OutageMedium')),
                ('outagelarge', models.FloatField(db_column='OutageLarge')),
                ('outagerupture', models.FloatField(db_column='OutageRupture')),
            ],
            options={
                'db_table': 'api_component_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentMaster',
            fields=[
                ('componentid', models.AutoField(db_column='ComponentID', primary_key=True, serialize=False)),
                ('componentnumber', models.CharField(db_column='ComponentNumber', max_length=100)),
                ('componentname', models.CharField(blank=True, db_column='ComponentName', max_length=150, null=True)),
                ('componentdesc', models.CharField(blank=True, db_column='ComponentDesc', max_length=250, null=True)),
                ('isequipmentlinked', models.IntegerField(db_column='IsEquipmentLinked', default=0)),
                ('apicomponenttypeid', models.IntegerField(db_column='APIComponentTypeID')),
                ('create', models.DateTimeField(db_column='Create', default=datetime.datetime(2019, 2, 20, 15, 37, 44, 839246))),
            ],
            options={
                'db_table': 'component_master',
                'ordering': ('componentid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentType',
            fields=[
                ('componenttypeid', models.IntegerField(db_column='ComponentTypeID', primary_key=True, serialize=False)),
                ('componenttypename', models.CharField(blank=True, db_column='ComponentTypeName', max_length=50, null=True)),
                ('componenttypecode', models.CharField(blank=True, db_column='ComponentTypeCode', max_length=50, null=True)),
            ],
            options={
                'db_table': 'component_type',
                'ordering': ('componenttypeid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DesignCode',
            fields=[
                ('designcodeid', models.AutoField(db_column='DesignCodeID', primary_key=True, serialize=False)),
                ('designcode', models.CharField(db_column='DesignCode', max_length=100)),
                ('designcodeapp', models.CharField(blank=True, db_column='DesignCodeApp', max_length=100, null=True)),
            ],
            options={
                'db_table': 'design_code',
                'ordering': ('designcodeid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DmCategory',
            fields=[
                ('dmcategoryid', models.IntegerField(db_column='DMCategoryID', primary_key=True, serialize=False)),
                ('dmcategoryname', models.CharField(blank=True, db_column='DMCategoryName', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Damage Category',
                'db_table': 'dm_category',
                'ordering': ('dmcategoryid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DmItems',
            fields=[
                ('dmitemid', models.IntegerField(db_column='DMItemID', primary_key=True, serialize=False)),
                ('dmdescription', models.CharField(blank=True, db_column='DMDescription', max_length=100, null=True)),
                ('dmseq', models.IntegerField(blank=True, db_column='DMSeq', null=True)),
                ('dmcode', models.CharField(blank=True, db_column='DMCode', max_length=50, null=True)),
                ('hasdf', models.IntegerField(blank=True, db_column='HasDF', default=0, null=True)),
                ('failuremode', models.CharField(blank=True, db_column='FailureMode', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Damage Item',
                'db_table': 'dm_items',
                'ordering': ('dmitemid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Emailsent',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('content', models.TextField(blank=True, db_column='content')),
                ('subject', models.TextField(blank=True, db_column='subject')),
                ('Emails', models.TextField(blank=True, db_column='emailsent')),
                ('Emailt', models.TextField(blank=True, db_column='emailto')),
            ],
            options={
                'db_table': 'zm_people_sent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Emailto',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('content', models.TextField(blank=True, db_column='content')),
                ('subject', models.TextField(blank=True, db_column='subject')),
                ('Emails', models.TextField(blank=True, db_column='emailsent')),
                ('Emailt', models.TextField(blank=True, db_column='emailto')),
                ('Is_see', models.IntegerField(blank=True, db_column='Is_see')),
            ],
            options={
                'db_table': 'zm_people_to',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentMaster',
            fields=[
                ('equipmentid', models.AutoField(db_column='EquipmentID', primary_key=True, serialize=False)),
                ('equipmentnumber', models.CharField(db_column='EquipmentNumber', max_length=100)),
                ('equipmentname', models.CharField(blank=True, db_column='EquipmentName', max_length=150, null=True)),
                ('commissiondate', models.DateTimeField(db_column='CommissionDate')),
                ('pfdno', models.CharField(blank=True, db_column='PFDNo', max_length=100, null=True)),
                ('processdescription', models.CharField(blank=True, db_column='ProcessDescription', max_length=250, null=True)),
                ('equipmentdesc', models.CharField(blank=True, db_column='EquipmentDesc', max_length=250, null=True)),
                ('create', models.DateTimeField(db_column='Create', default=datetime.datetime(2019, 2, 20, 15, 37, 44, 842231))),
            ],
            options={
                'db_table': 'equipment_master',
                'ordering': ('equipmentid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('equipmenttypeid', models.IntegerField(db_column='EquipmentTypeID', primary_key=True, serialize=False)),
                ('equipmenttypecode', models.CharField(blank=True, db_column='EquipmentTypeCode', max_length=50, null=True)),
                ('equipmenttypename', models.CharField(blank=True, db_column='EquipmentTypeName', max_length=50, null=True)),
            ],
            options={
                'db_table': 'equipment_type',
                'ordering': ('equipmenttypeid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('facilityid', models.AutoField(db_column='FacilityID', primary_key=True, serialize=False)),
                ('facilityname', models.CharField(db_column='FacilityName', max_length=100)),
                ('managementfactor', models.FloatField(db_column='ManagementFactor')),
                ('create', models.DateTimeField(db_column='Create', default=datetime.datetime(2019, 2, 20, 15, 37, 44, 843236))),
            ],
            options={
                'db_table': 'facility',
                'ordering': ('facilityid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('manufacturerid', models.AutoField(db_column='ManufacturerID', primary_key=True, serialize=False)),
                ('manufacturername', models.CharField(db_column='ManufacturerName', max_length=100)),
            ],
            options={
                'db_table': 'manufacturer',
                'ordering': ('manufacturerid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwAssessment',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('assessmentdate', models.DateTimeField(blank=True, db_column='AssessmentDate', null=True)),
                ('riskanalysisperiod', models.IntegerField(db_column='RiskAnalysisPeriod')),
                ('isequipmentlinked', models.IntegerField(db_column='IsEquipmentLinked', default=0)),
                ('proposalname', models.CharField(blank=True, db_column='ProposalName', max_length=100, null=True)),
                ('create', models.DateTimeField(db_column='Create', default=datetime.datetime(2019, 2, 20, 15, 37, 44, 844236))),
            ],
            options={
                'db_table': 'rw_assessment',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwDamageMechanism',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('isactive', models.IntegerField(db_column='IsActive', default=1)),
                ('notes', models.TextField(db_column='Notes', null=True)),
                ('expectedtypeid', models.IntegerField(db_column='ExpectedTypeID', default=0)),
                ('isel', models.IntegerField(db_column='IsEL', default=0)),
                ('elvalue', models.IntegerField(db_column='ELValue', default=0)),
                ('isdf', models.IntegerField(db_column='IsDF', default=1)),
                ('isuserdisabled', models.IntegerField(db_column='IsUserDisabled', default=0)),
                ('df1', models.FloatField(db_column='DF1')),
                ('df2', models.FloatField(db_column='DF2')),
                ('df3', models.FloatField(db_column='DF3')),
                ('dfbase', models.FloatField(db_column='DFBase', default=0)),
                ('rli', models.FloatField(db_column='RLI', default=0)),
                ('highestinspectioneffectiveness', models.TextField(db_column='HighestInspectionEffectiveness', max_length=50)),
                ('secondinspectioneffectiveness', models.TextField(db_column='SecondInspectionEffectiveness', max_length=50, null=True)),
                ('numberofinspections', models.IntegerField(db_column='NumberOfInspections')),
                ('lastinspdate', models.DateTimeField(blank=True, db_column='LastInspDate')),
                ('inspduedate', models.DateTimeField(blank=True, db_column='InspDueDate')),
            ],
            options={
                'db_table': 'rw_damage_mechanism',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwInspectionHistory',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('inspectionplanname', models.CharField(blank=True, db_column='InspectionPlanName', max_length=100, null=True)),
                ('inspectioncoveragename', models.CharField(blank=True, db_column='InspectionCoverageName', max_length=100, null=True)),
                ('equipmentnumber', models.CharField(blank=True, db_column='EquipmentNumber', max_length=50, null=True)),
                ('componentnumber', models.CharField(blank=True, db_column='ComponentNumber', max_length=50, null=True)),
                ('dm', models.CharField(blank=True, db_column='DM', max_length=150, null=True)),
                ('inspectiontype', models.CharField(blank=True, db_column='InspectionType', max_length=250, null=True)),
                ('inspectiondate', models.DateTimeField(blank=True, db_column='InspectionDate', null=True)),
                ('inspectioneffective', models.CharField(blank=True, db_column='InspectionEffective', max_length=50, null=True)),
            ],
            options={
                'db_table': 'rw_inspection_history',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sites',
            fields=[
                ('siteid', models.AutoField(db_column='SiteID', primary_key=True, serialize=False)),
                ('sitename', models.CharField(blank=True, db_column='SiteName', max_length=100, null=True)),
                ('create', models.DateTimeField(db_column='Create', default=datetime.datetime(2019, 2, 20, 15, 37, 44, 863151))),
                ('compainfor', models.TextField(blank=True, db_column='compa_infor')),
            ],
            options={
                'db_table': 'sites',
                'ordering': ('siteid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl204DmHtha',
            fields=[
                ('susceptibility', models.TextField(blank=True, db_column='Susceptibility', primary_key=True, serialize=False)),
                ('no_inspection', models.IntegerField(blank=True, db_column='No Inspection', null=True)),
                ('number_1d', models.IntegerField(blank=True, db_column='1D', null=True)),
                ('number_1c', models.IntegerField(blank=True, db_column='1C', null=True)),
                ('number_1b', models.IntegerField(blank=True, db_column='1B', null=True)),
                ('number_2d', models.IntegerField(blank=True, db_column='2D', null=True)),
                ('number_2c', models.IntegerField(blank=True, db_column='2C', null=True)),
                ('number_2b', models.IntegerField(blank=True, db_column='2B', null=True)),
            ],
            options={
                'verbose_name': 'Table 20.4 – Damage Factor - HTHA',
                'db_table': 'tbl_204_dm_htha',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl213DmImpactExemption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('componentthickness', models.FloatField(blank=True, db_column='ComponentThickness', null=True)),
                ('curvea', models.FloatField(blank=True, db_column='CurveA', null=True)),
                ('curveb', models.FloatField(blank=True, db_column='CurveB', null=True)),
                ('curvec', models.FloatField(blank=True, db_column='CurveC', null=True)),
                ('curved', models.FloatField(blank=True, db_column='CurveD', null=True)),
            ],
            options={
                'verbose_name': 'Table 21.3 – Impact Test Exemption Temperature',
                'db_table': 'tbl_213_dm_impact_exemption',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl214DmNotPwht',
            fields=[
                ('tmin_tref', models.IntegerField(blank=True, db_column='Tmin-Tref', primary_key=True, serialize=False)),
                ('number_6_4', models.FloatField(blank=True, db_column='6.4', null=True)),
                ('number_12_7', models.FloatField(blank=True, db_column='12.7', null=True)),
                ('number_25_4', models.FloatField(blank=True, db_column='25.4', null=True)),
                ('number_38_1', models.FloatField(blank=True, db_column='38.1', null=True)),
                ('number_50_8', models.FloatField(blank=True, db_column='50.8', null=True)),
                ('number_63_5', models.FloatField(blank=True, db_column='63.5', null=True)),
                ('number_76_2', models.FloatField(blank=True, db_column='76.2', null=True)),
                ('number_88_9', models.FloatField(blank=True, db_column='88.9', null=True)),
                ('number_101_6', models.FloatField(blank=True, db_column='101.6', null=True)),
            ],
            options={
                'verbose_name': 'Table 21.4M – Damage Factor, Component Not Subject to PWHT – Brittle Fracture',
                'db_table': 'tbl_214_dm_not_pwht',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl215DmPwht',
            fields=[
                ('tmin_tref', models.IntegerField(blank=True, db_column='Tmin-Tref', primary_key=True, serialize=False)),
                ('number_6_4', models.FloatField(blank=True, db_column='6.4', null=True)),
                ('number_12_7', models.FloatField(blank=True, db_column='12.7', null=True)),
                ('number_25_4', models.FloatField(blank=True, db_column='25.4', null=True)),
                ('number_38_1', models.FloatField(blank=True, db_column='38.1', null=True)),
                ('number_50_8', models.FloatField(blank=True, db_column='50.8', null=True)),
                ('number_63_5', models.FloatField(blank=True, db_column='63.5', null=True)),
                ('number_76_2', models.FloatField(blank=True, db_column='76.2', null=True)),
                ('number_88_9', models.FloatField(blank=True, db_column='88.9', null=True)),
                ('number_101_6', models.FloatField(blank=True, db_column='101.6', null=True)),
            ],
            options={
                'verbose_name': 'Table 21.5M – Damage Factor, Component Subject to PWHT – Brittle Fracture',
                'db_table': 'tbl_215_dm_pwht',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl3B21SiConversion',
            fields=[
                ('conversionfactory', models.IntegerField(blank=True, db_column='conversionFactory', primary_key=True, serialize=False)),
                ('siunits', models.FloatField(blank=True, db_column='SIUnits', null=True)),
                ('usunits', models.FloatField(blank=True, db_column='USUnits', null=True)),
            ],
            options={
                'verbose_name': 'Table 3.B.2.1 – SI and US Customary Conversion Factor',
                'db_table': 'tbl_3b21_si_conversion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl511DfbThin',
            fields=[
                ('art', models.FloatField(blank=True, primary_key=True, serialize=False)),
                ('e', models.IntegerField(blank=True, db_column='E', null=True)),
                ('insp', models.IntegerField(blank=True, null=True)),
                ('d', models.IntegerField(blank=True, db_column='D', null=True)),
                ('c', models.IntegerField(blank=True, db_column='C', null=True)),
                ('b', models.IntegerField(blank=True, db_column='B', null=True)),
                ('a', models.IntegerField(blank=True, db_column='A', null=True)),
            ],
            options={
                'verbose_name': 'Table 5.11 – Thinning Damage Factor',
                'db_table': 'tbl_511_dfb_thin',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl512DfbThinTankBottom',
            fields=[
                ('art', models.FloatField(blank=True, primary_key=True, serialize=False)),
                ('e', models.IntegerField(blank=True, db_column='E', null=True)),
                ('insp', models.IntegerField(blank=True, null=True)),
                ('d', models.IntegerField(blank=True, db_column='D', null=True)),
                ('c', models.IntegerField(blank=True, db_column='C', null=True)),
                ('b', models.IntegerField(blank=True, db_column='B', null=True)),
                ('a', models.IntegerField(blank=True, db_column='A', null=True)),
            ],
            options={
                'verbose_name': 'Table 5.12 – Thinning Damage Factors for Tank Bottom',
                'db_table': 'tbl_512_dfb_thin_tank_bottom',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl52CaPropertiesLevel1',
            fields=[
                ('fluid', models.TextField(blank=True, db_column='Fluid', primary_key=True, serialize=False)),
                ('mw', models.FloatField(blank=True, db_column='MW', null=True)),
                ('density', models.FloatField(blank=True, db_column='Density', null=True)),
                ('nbp', models.FloatField(blank=True, db_column='NBP', null=True)),
                ('ambient', models.TextField(blank=True, db_column='Ambient', null=True)),
                ('ideal', models.IntegerField(blank=True, null=True)),
                ('a', models.FloatField(blank=True, db_column='A', null=True)),
                ('b', models.FloatField(blank=True, db_column='B', null=True)),
                ('c', models.FloatField(blank=True, db_column='C', null=True)),
                ('d', models.FloatField(blank=True, db_column='D', null=True)),
                ('e', models.FloatField(blank=True, db_column='E', null=True)),
                ('auto', models.FloatField(blank=True, db_column='Auto', null=True)),
            ],
            options={
                'verbose_name': 'Table 5.2 – Properties of the Representative Fluids Used in Level 1 Analysi',
                'db_table': 'tbl_52_ca_properties_level_1',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl58CaComponentDm',
            fields=[
                ('fluid', models.TextField(blank=True, db_column='Fluid', primary_key=True, serialize=False)),
                ('cainl_gas_a', models.FloatField(blank=True, db_column='CAINL_gas_a', null=True)),
                ('cainl_gas_b', models.FloatField(blank=True, db_column='CAINL_gas_b', null=True)),
                ('cainl_liquid_a', models.FloatField(blank=True, db_column='CAINL_liquid_a', null=True)),
                ('cainl_liquid_b', models.FloatField(blank=True, db_column='CAINL_liquid_b', null=True)),
                ('cail_gas_a', models.FloatField(blank=True, db_column='CAIL_gas_a', null=True)),
                ('cail_gas_b', models.FloatField(blank=True, db_column='CAIL_gas_b', null=True)),
                ('cail_liquid_a', models.FloatField(blank=True, db_column='CAIL_liquid_a', null=True)),
                ('cail_liquid_b', models.FloatField(blank=True, db_column='CAIL_liquid_b', null=True)),
                ('iainl_gas_a', models.FloatField(blank=True, db_column='IAINL_gas_a', null=True)),
                ('iainl_gas_b', models.FloatField(blank=True, db_column='IAINL_gas_b', null=True)),
                ('iainl_liquid_a', models.FloatField(blank=True, db_column='IAINL_liquid_a', null=True)),
                ('iainl_liquid_b', models.FloatField(blank=True, db_column='IAINL_liquid_b', null=True)),
                ('iail_gas_a', models.FloatField(blank=True, db_column='IAIL_gas_a', null=True)),
                ('iail_gas_b', models.FloatField(blank=True, db_column='IAIL_gas_b', null=True)),
                ('iail_liquid_a', models.FloatField(blank=True, db_column='IAIL_liquid_a', null=True)),
                ('iail_liquid_b', models.FloatField(blank=True, db_column='IAIL_liquid_b', null=True)),
            ],
            options={
                'verbose_name': 'Table 5.8M – Component Damage Flammable Consequence Equation Constant',
                'db_table': 'tbl_58_ca_component_dm',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl59ComponentDamagePerson',
            fields=[
                ('fluid', models.TextField(blank=True, db_column='Fluid', primary_key=True, serialize=False)),
                ('cainl_gas_a', models.FloatField(blank=True, db_column='CAINL_gas_a', null=True)),
                ('cainl_gas_b', models.FloatField(blank=True, db_column='CAINL_gas_b', null=True)),
                ('cainl_liquid_a', models.FloatField(blank=True, db_column='CAINL_liquid_a', null=True)),
                ('cainl_liquid_b', models.FloatField(blank=True, db_column='CAINL_liquid_b', null=True)),
                ('call_gas_a', models.FloatField(blank=True, db_column='CALL_gas_a', null=True)),
                ('call_gas_b', models.FloatField(blank=True, db_column='CALL_gas_b', null=True)),
                ('call_liquid_a', models.FloatField(blank=True, db_column='CALL_liquid_a', null=True)),
                ('call_liquid_b', models.FloatField(blank=True, db_column='CALL_liquid_b', null=True)),
                ('iainl_gas_a', models.FloatField(blank=True, db_column='IAINL_gas_a', null=True)),
                ('iainl_gas_b', models.FloatField(blank=True, db_column='IAINL_gas_b', null=True)),
                ('iainl_liquid_a', models.FloatField(blank=True, db_column='IAINL_liquid_a', null=True)),
                ('iainl_liquid_b', models.FloatField(blank=True, db_column='IAINL_liquid_b', null=True)),
                ('iail_gas_a', models.FloatField(blank=True, db_column='IAIL_gas_a', null=True)),
                ('iail_gas_b', models.FloatField(blank=True, db_column='IAIL_gas_b', null=True)),
                ('iail_liquid_a', models.FloatField(blank=True, db_column='IAIL_liquid_a', null=True)),
                ('iail_liquid_b', models.FloatField(blank=True, db_column='IAIL_liquid_b', null=True)),
            ],
            options={
                'verbose_name': 'Table 5.9M – Personnel Injury Flammable Consequence Equation Constant',
                'db_table': 'tbl_59_component_damage_person',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl64DmLinningInorganic',
            fields=[
                ('yearssincelastinspection', models.IntegerField(blank=True, db_column='YearsSinceLastInspection', primary_key=True, serialize=False)),
                ('strip_lined_alloy', models.FloatField(blank=True, db_column='Strip lined alloy', null=True)),
                ('castable_refractory', models.FloatField(blank=True, db_column='Castable refractory', null=True)),
                ('castable_refractory_severe_condition', models.IntegerField(blank=True, db_column='Castable refractory severe condition', null=True)),
                ('glass_lined', models.IntegerField(blank=True, db_column='Glass lined', null=True)),
                ('acid_brick', models.IntegerField(blank=True, db_column='Acid Brick', null=True)),
                ('fiberglass', models.IntegerField(blank=True, db_column='Fiberglass', null=True)),
            ],
            options={
                'verbose_name': 'Table 6.4 – Lining Damage Factors – Inorganic Lining',
                'db_table': 'tbl_64_dm_linning_inorganic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl65DmLinningOrganic',
            fields=[
                ('yearinservice', models.IntegerField(blank=True, db_column='YearInService', primary_key=True, serialize=False)),
                ('morethan6years', models.IntegerField(blank=True, db_column='MoreThan6Years', null=True)),
                ('withinlast6years', models.IntegerField(blank=True, db_column='WithinLast6Years', null=True)),
                ('withinlast3years', models.FloatField(blank=True, db_column='WithinLast3Years', null=True)),
            ],
            options={
                'verbose_name': 'Table 6.5 – Lining Damage Factors – Organic Lining',
                'db_table': 'tbl_65_dm_linning_organic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl71PropertiesStorageTank',
            fields=[
                ('fluid', models.TextField(blank=True, db_column='Fluid', primary_key=True, serialize=False)),
                ('level_1_consequence_analysis_representative_fluid', models.TextField(blank=True, db_column='Level 1 Consequence Analysis Representative Fluid', null=True)),
                ('molecular_weight', models.IntegerField(blank=True, db_column='Molecular Weight', null=True)),
                ('liquid_density', models.FloatField(blank=True, db_column='Liquid Density', null=True)),
                ('liquid_density_viscosity', models.FloatField(blank=True, db_column='Liquid Density Viscosity', null=True)),
            ],
            options={
                'verbose_name': 'Table 7.1M – Fluids and Fluid Properties for Atmospheric Storage Tank Consequence Analysi',
                'db_table': 'tbl_71_properties_storage_tank',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tbl74SccDmPwht',
            fields=[
                ('svi', models.IntegerField(blank=True, db_column='SVI', primary_key=True, serialize=False)),
                ('e', models.IntegerField(blank=True, db_column='E', null=True)),
                ('number_1d', models.IntegerField(blank=True, db_column='1D', null=True)),
                ('number_1c', models.IntegerField(blank=True, db_column='1C', null=True)),
                ('number_1b', models.IntegerField(blank=True, db_column='1B', null=True)),
                ('number_1a', models.IntegerField(blank=True, db_column='1A', null=True)),
                ('number_2d', models.IntegerField(blank=True, db_column='2D', null=True)),
                ('number_2c', models.IntegerField(blank=True, db_column='2C', null=True)),
                ('number_2b', models.IntegerField(blank=True, db_column='2B', null=True)),
                ('number_2a', models.IntegerField(blank=True, db_column='2A', null=True)),
                ('number_3d', models.IntegerField(blank=True, db_column='3D', null=True)),
                ('number_3c', models.IntegerField(blank=True, db_column='3C', null=True)),
                ('number_3b', models.IntegerField(blank=True, db_column='3B', null=True)),
                ('number_3a', models.IntegerField(blank=True, db_column='3A', null=True)),
                ('number_4d', models.IntegerField(blank=True, db_column='4D', null=True)),
                ('number_4c', models.IntegerField(blank=True, db_column='4C', null=True)),
                ('number_4b', models.IntegerField(blank=True, db_column='4B', null=True)),
                ('number_4a', models.IntegerField(blank=True, db_column='4A', null=True)),
                ('number_5d', models.IntegerField(blank=True, db_column='5D', null=True)),
                ('number_5c', models.IntegerField(blank=True, db_column='5C', null=True)),
                ('number_5b', models.IntegerField(blank=True, db_column='5B', null=True)),
                ('number_5a', models.IntegerField(blank=True, db_column='5A', null=True)),
                ('number_6d', models.IntegerField(blank=True, db_column='6D', null=True)),
                ('number_6c', models.IntegerField(blank=True, db_column='6C', null=True)),
                ('number_6b', models.IntegerField(blank=True, db_column='6B', null=True)),
                ('number_6a', models.IntegerField(blank=True, db_column='6A', null=True)),
            ],
            options={
                'verbose_name': 'Table 7.4 – SCC Damage Factors – All SCC Mechanism',
                'db_table': 'tbl_74_scc_dm_pwht',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VeriContent',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('content', models.TextField(blank=True, db_column='content')),
                ('date', models.DateTimeField(db_column='date', default=datetime.datetime(2019, 2, 20, 15, 37, 44, 873122))),
            ],
            options={
                'db_table': 'vericontent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('proposal', models.TextField(blank=True, db_column='proposal')),
                ('date', models.DateTimeField(db_column='date', default=datetime.datetime(2019, 2, 20, 15, 37, 44, 873122))),
                ('Is_active', models.IntegerField(blank=True, db_column='Is_active')),
                ('manager', models.TextField(blank=True, db_column='manager')),
                ('facility', models.IntegerField(blank=True, db_column='facility')),
                ('com', models.TextField(blank=True, db_column='com')),
                ('eq', models.TextField(blank=True, db_column='eq')),
            ],
            options={
                'db_table': 'verifacation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Zbusiness',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('compainfor', models.TextField(blank=True, db_column='compa_infor')),
                ('namecompany', models.TextField(blank=True, db_column='name_company')),
            ],
            options={
                'db_table': 'z_business',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZComment',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('id_user', models.IntegerField(blank=True, null=True)),
                ('id_posts', models.IntegerField(blank=True, null=True)),
                ('content', models.CharField(blank=True, max_length=2000, null=True)),
                ('time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'z_comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZNotification',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('id_user', models.IntegerField(blank=True, null=True)),
                ('subject', models.CharField(blank=True, max_length=100, null=True)),
                ('content', models.CharField(blank=True, max_length=100, null=True)),
                ('object', models.CharField(blank=True, max_length=100, null=True)),
                ('link', models.CharField(blank=True, max_length=200, null=True)),
                ('time', models.DateTimeField(blank=True, null=True)),
                ('state', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'z_notification',
                'ordering': ['-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZPosts',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('id_user', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('content', models.CharField(blank=True, max_length=8000, null=True)),
                ('time', models.DateTimeField(blank=True, null=True)),
                ('tag', models.CharField(blank=True, max_length=100, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'z_posts',
                'ordering': ['-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZUser',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=60, null=True)),
                ('email', models.CharField(blank=True, db_column='email', max_length=100, null=True)),
                ('phone', models.CharField(blank=True, db_column='phone', max_length=11, null=True)),
                ('adress', models.CharField(blank=True, max_length=200, null=True)),
                ('username', models.CharField(blank=True, max_length=40, null=True)),
                ('password', models.CharField(blank=True, max_length=40, null=True)),
                ('active', models.IntegerField(blank=True, default='0')),
                ('other_info', models.IntegerField(blank=True, null=True)),
                ('kind', models.CharField(blank=True, max_length=20, null=True)),
                ('date_joined', models.DateTimeField(default=datetime.datetime(2019, 2, 20, 15, 37, 44, 870131))),
            ],
            options={
                'db_table': 'z_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZProfilebisiness',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('organization_detail', models.CharField(blank=True, max_length=1000, null=True)),
                ('image_name', models.CharField(blank=True, default='noavatar', max_length=200, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud.ZUser')),
            ],
            options={
                'db_table': 'z_profile_business',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FacilityRiskTarget',
            fields=[
                ('facilityid', models.ForeignKey(db_column='FacilityID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.Facility')),
                ('risktarget_fc', models.FloatField(blank=True, db_column='RiskTarget_FC', null=True)),
                ('risktarget_ac', models.FloatField(blank=True, db_column='RiskTarget_AC', null=True)),
            ],
            options={
                'db_table': 'facility_risk_target',
                'ordering': ('facilityid',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwCaLevel1',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('release_phase', models.CharField(blank=True, db_column='Release_Phase', max_length=50, null=True)),
                ('fact_di', models.FloatField(blank=True, null=True)),
                ('fact_mit', models.FloatField(blank=True, null=True)),
                ('fact_ait', models.FloatField(blank=True, null=True)),
                ('ca_cmd', models.FloatField(blank=True, db_column='CA_cmd', null=True)),
                ('ca_inj_flame', models.FloatField(blank=True, db_column='CA_inj_flame', null=True)),
                ('ca_inj_toxic', models.FloatField(blank=True, db_column='CA_inj_toxic', null=True)),
                ('ca_inj_ntnf', models.FloatField(blank=True, db_column='CA_inj_ntnf', null=True)),
                ('fc_cmd', models.FloatField(blank=True, db_column='FC_cmd', null=True)),
                ('fc_affa', models.FloatField(blank=True, db_column='FC_affa', null=True)),
                ('fc_prod', models.FloatField(blank=True, db_column='FC_prod', null=True)),
                ('fc_inj', models.FloatField(blank=True, db_column='FC_inj', null=True)),
                ('fc_envi', models.FloatField(blank=True, db_column='FC_envi', null=True)),
                ('fc_total', models.FloatField(blank=True, db_column='FC_total', null=True)),
                ('fcof_category', models.CharField(blank=True, db_column='FCOF_Category', max_length=50, null=True)),
            ],
            options={
                'db_table': 'rw_ca_level1',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwCaTank',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('hydraulic_water', models.FloatField(blank=True, db_column='Hydraulic_Water', null=True)),
                ('hydraulic_fluid', models.FloatField(blank=True, db_column='Hydraulic_Fluid', null=True)),
                ('seepage_velocity', models.FloatField(blank=True, db_column='Seepage_Velocity', null=True)),
                ('flow_rate_d1', models.FloatField(blank=True, db_column='Flow_Rate_D1', null=True)),
                ('flow_rate_d2', models.FloatField(blank=True, db_column='Flow_Rate_D2', null=True)),
                ('flow_rate_d3', models.FloatField(blank=True, db_column='Flow_Rate_D3', null=True)),
                ('flow_rate_d4', models.FloatField(blank=True, db_column='Flow_Rate_D4', null=True)),
                ('leak_duration_d1', models.FloatField(blank=True, db_column='Leak_Duration_D1', null=True)),
                ('leak_duration_d2', models.FloatField(blank=True, db_column='Leak_Duration_D2', null=True)),
                ('leak_duration_d3', models.FloatField(blank=True, db_column='Leak_Duration_D3', null=True)),
                ('leak_duration_d4', models.FloatField(blank=True, db_column='Leak_Duration_D4', null=True)),
                ('release_volume_leak_d1', models.FloatField(blank=True, db_column='Release_Volume_Leak_D1', null=True)),
                ('release_volume_leak_d2', models.FloatField(blank=True, db_column='Release_Volume_Leak_D2', null=True)),
                ('release_volume_leak_d3', models.FloatField(blank=True, db_column='Release_Volume_Leak_D3', null=True)),
                ('release_volume_leak_d4', models.FloatField(blank=True, db_column='Release_Volume_Leak_D4', null=True)),
                ('release_volume_rupture', models.FloatField(blank=True, db_column='Release_Volume_Rupture', null=True)),
                ('liquid_height', models.FloatField(blank=True, db_column='Liquid_Height', null=True)),
                ('volume_fluid', models.FloatField(blank=True, db_column='Volume_Fluid', null=True)),
                ('time_leak_ground', models.FloatField(blank=True, db_column='Time_Leak_Ground', null=True)),
                ('volume_subsoil_leak_d1', models.FloatField(blank=True, db_column='Volume_SubSoil_Leak_D1', null=True)),
                ('volume_subsoil_leak_d4', models.FloatField(blank=True, db_column='Volume_SubSoil_Leak_D4', null=True)),
                ('volume_ground_water_leak_d1', models.FloatField(blank=True, db_column='Volume_Ground_Water_Leak_D1', null=True)),
                ('volume_ground_water_leak_d4', models.FloatField(blank=True, db_column='Volume_Ground_Water_Leak_D4', null=True)),
                ('barrel_dike_leak', models.FloatField(blank=True, db_column='Barrel_Dike_Leak', null=True)),
                ('barrel_dike_rupture', models.FloatField(blank=True, db_column='Barrel_Dike_Rupture', null=True)),
                ('barrel_onsite_leak', models.FloatField(blank=True, db_column='Barrel_Onsite_Leak', null=True)),
                ('barrel_onsite_rupture', models.FloatField(blank=True, db_column='Barrel_Onsite_Rupture', null=True)),
                ('barrel_offsite_leak', models.FloatField(blank=True, db_column='Barrel_Offsite_Leak', null=True)),
                ('barrel_offsite_rupture', models.FloatField(blank=True, db_column='Barrel_Offsite_Rupture', null=True)),
                ('barrel_water_leak', models.FloatField(blank=True, db_column='Barrel_Water_Leak', null=True)),
                ('barrel_water_rupture', models.FloatField(blank=True, db_column='Barrel_Water_Rupture', null=True)),
                ('fc_environ_leak', models.FloatField(blank=True, db_column='FC_Environ_Leak', null=True)),
                ('fc_environ_rupture', models.FloatField(blank=True, db_column='FC_Environ_Rupture', null=True)),
                ('fc_environ', models.FloatField(blank=True, db_column='FC_Environ', null=True)),
                ('material_factor', models.FloatField(blank=True, db_column='Material_Factor', null=True)),
                ('component_damage_cost', models.FloatField(blank=True, db_column='Component_Damage_Cost', null=True)),
                ('business_cost', models.FloatField(blank=True, db_column='Business_Cost', null=True)),
                ('consequence', models.FloatField(blank=True, db_column='Consequence', null=True)),
                ('consequencecategory', models.CharField(blank=True, db_column='ConsequenceCategory', max_length=50, null=True)),
            ],
            options={
                'db_table': 'rw_ca_tank',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwCoating',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('externalcoating', models.IntegerField(blank=True, db_column='ExternalCoating', default=0, null=True)),
                ('externalinsulation', models.IntegerField(blank=True, db_column='ExternalInsulation', default=0, null=True)),
                ('internalcladding', models.IntegerField(blank=True, db_column='InternalCladding', default=0, null=True)),
                ('internalcoating', models.IntegerField(blank=True, db_column='InternalCoating', default=0, null=True)),
                ('internallining', models.IntegerField(blank=True, db_column='InternalLining', default=0, null=True)),
                ('externalcoatingdate', models.DateTimeField(blank=True, db_column='ExternalCoatingDate', null=True)),
                ('externalcoatingquality', models.CharField(blank=True, db_column='ExternalCoatingQuality', max_length=50, null=True)),
                ('externalinsulationtype', models.CharField(blank=True, db_column='ExternalInsulationType', max_length=50, null=True)),
                ('insulationcondition', models.CharField(blank=True, db_column='InsulationCondition', max_length=50, null=True)),
                ('insulationcontainschloride', models.IntegerField(blank=True, db_column='InsulationContainsChloride', default=0, null=True)),
                ('internallinercondition', models.CharField(blank=True, db_column='InternalLinerCondition', max_length=50, null=True)),
                ('internallinertype', models.CharField(blank=True, db_column='InternalLinerType', max_length=50, null=True)),
                ('claddingcorrosionrate', models.FloatField(blank=True, db_column='CladdingCorrosionRate', null=True)),
                ('supportconfignotallowcoatingmaint', models.IntegerField(blank=True, db_column='SupportConfigNotAllowCoatingMaint', default=0, null=True)),
            ],
            options={
                'db_table': 'rw_coating',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwComponent',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('nominaldiameter', models.FloatField(blank=True, db_column='NominalDiameter', null=True)),
                ('nominalthickness', models.FloatField(blank=True, db_column='NominalThickness', null=True)),
                ('currentthickness', models.FloatField(blank=True, db_column='CurrentThickness', null=True)),
                ('minreqthickness', models.FloatField(blank=True, db_column='MinReqThickness', null=True)),
                ('currentcorrosionrate', models.FloatField(blank=True, db_column='CurrentCorrosionRate', null=True)),
                ('branchdiameter', models.CharField(blank=True, db_column='BranchDiameter', max_length=50, null=True)),
                ('branchjointtype', models.CharField(blank=True, db_column='BranchJointType', max_length=50, null=True)),
                ('brinnelhardness', models.CharField(blank=True, db_column='BrinnelHardness', max_length=50, null=True)),
                ('chemicalinjection', models.IntegerField(blank=True, db_column='ChemicalInjection', default=0, null=True)),
                ('highlyinjectioninsp', models.IntegerField(blank=True, db_column='HighlyInjectionInsp', default=0, null=True)),
                ('complexityprotrusion', models.CharField(blank=True, db_column='ComplexityProtrusion', max_length=50, null=True)),
                ('correctiveaction', models.CharField(blank=True, db_column='CorrectiveAction', max_length=50, null=True)),
                ('crackspresent', models.IntegerField(blank=True, db_column='CracksPresent', default=0, null=True)),
                ('cyclicloadingwitin15_25m', models.CharField(blank=True, db_column='CyclicLoadingWitin15_25m', max_length=50, null=True)),
                ('damagefoundinspection', models.IntegerField(blank=True, db_column='DamageFoundInspection', default=0, null=True)),
                ('deltafatt', models.FloatField(blank=True, db_column='DeltaFATT', null=True)),
                ('numberpipefittings', models.CharField(blank=True, db_column='NumberPipeFittings', max_length=50, null=True)),
                ('pipecondition', models.CharField(blank=True, db_column='PipeCondition', max_length=50, null=True)),
                ('previousfailures', models.CharField(blank=True, db_column='PreviousFailures', max_length=50, null=True)),
                ('shakingamount', models.CharField(blank=True, db_column='ShakingAmount', max_length=50, null=True)),
                ('shakingdetected', models.IntegerField(blank=True, db_column='ShakingDetected', default=0, null=True)),
                ('shakingtime', models.CharField(blank=True, db_column='ShakingTime', max_length=50, null=True)),
                ('trampelements', models.IntegerField(blank=True, db_column='TrampElements', default=0, null=True)),
                ('shellheight', models.FloatField(blank=True, db_column='ShellHeight', null=True)),
                ('releasepreventionbarrier', models.IntegerField(blank=True, db_column='ReleasePreventionBarrier', default=0, null=True)),
                ('concretefoundation', models.IntegerField(blank=True, db_column='ConcreteFoundation', default=0, null=True)),
                ('severityofvibration', models.CharField(blank=True, db_column='SeverityOfVibration', max_length=50, null=True)),
            ],
            options={
                'db_table': 'rw_component',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwDataChart',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('riskage1', models.FloatField(db_column='risk_age_1')),
                ('riskage2', models.FloatField(db_column='risk_age_2')),
                ('riskage3', models.FloatField(db_column='risk_age_3')),
                ('riskage4', models.FloatField(db_column='risk_age_4')),
                ('riskage5', models.FloatField(db_column='risk_age_5')),
                ('riskage6', models.FloatField(db_column='risk_age_6')),
                ('riskage7', models.FloatField(db_column='risk_age_7')),
                ('riskage8', models.FloatField(db_column='risk_age_8')),
                ('riskage9', models.FloatField(db_column='risk_age_9')),
                ('riskage10', models.FloatField(db_column='risk_age_10')),
                ('riskage11', models.FloatField(db_column='risk_age_11')),
                ('riskage12', models.FloatField(db_column='risk_age_12')),
                ('riskage13', models.FloatField(db_column='risk_age_13')),
                ('riskage14', models.FloatField(db_column='risk_age_14')),
                ('riskage15', models.FloatField(db_column='risk_age_15')),
                ('risktarget', models.FloatField(db_column='risk_target')),
            ],
            options={
                'db_table': 'rw_data_chart',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwEquipment',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('commissiondate', models.DateTimeField(db_column='CommissionDate')),
                ('adminupsetmanagement', models.IntegerField(db_column='AdminUpsetManagement', default=0)),
                ('containsdeadlegs', models.IntegerField(blank=True, db_column='ContainsDeadlegs', default=0, null=True)),
                ('cyclicoperation', models.IntegerField(blank=True, db_column='CyclicOperation', default=0, null=True)),
                ('highlydeadleginsp', models.IntegerField(blank=True, db_column='HighlyDeadlegInsp', default=0, null=True)),
                ('downtimeprotectionused', models.IntegerField(blank=True, db_column='DowntimeProtectionUsed', default=0, null=True)),
                ('externalenvironment', models.CharField(blank=True, db_column='ExternalEnvironment', max_length=50, null=True)),
                ('heattraced', models.IntegerField(blank=True, db_column='HeatTraced', default=0, null=True)),
                ('interfacesoilwater', models.IntegerField(blank=True, db_column='InterfaceSoilWater', default=0, null=True)),
                ('lineronlinemonitoring', models.IntegerField(blank=True, db_column='LinerOnlineMonitoring', default=0, null=True)),
                ('materialexposedtoclext', models.IntegerField(blank=True, db_column='MaterialExposedToClExt', default=0, null=True)),
                ('minreqtemperaturepressurisation', models.FloatField(blank=True, db_column='MinReqTemperaturePressurisation', null=True)),
                ('onlinemonitoring', models.CharField(blank=True, db_column='OnlineMonitoring', max_length=100, null=True)),
                ('presencesulphideso2', models.IntegerField(blank=True, db_column='PresenceSulphidesO2', default=0, null=True)),
                ('presencesulphideso2shutdown', models.IntegerField(blank=True, db_column='PresenceSulphidesO2Shutdown', default=0, null=True)),
                ('pressurisationcontrolled', models.IntegerField(blank=True, db_column='PressurisationControlled', default=0, null=True)),
                ('pwht', models.IntegerField(blank=True, db_column='PWHT', default=0, null=True)),
                ('steamoutwaterflush', models.IntegerField(blank=True, db_column='SteamOutWaterFlush', default=0, null=True)),
                ('managementfactor', models.FloatField(blank=True, db_column='ManagementFactor', null=True)),
                ('thermalhistory', models.CharField(blank=True, db_column='ThermalHistory', max_length=50, null=True)),
                ('yearlowestexptemp', models.IntegerField(blank=True, db_column='YearLowestExpTemp', default=0, null=True)),
                ('volume', models.FloatField(blank=True, db_column='Volume', null=True)),
                ('typeofsoil', models.CharField(blank=True, db_column='TypeOfSoil', max_length=50, null=True)),
                ('environmentsensitivity', models.CharField(blank=True, db_column='EnvironmentSensitivity', max_length=50, null=True)),
                ('distancetogroundwater', models.FloatField(blank=True, db_column='DistanceToGroundWater', null=True)),
                ('adjustmentsettle', models.CharField(blank=True, db_column='AdjustmentSettle', max_length=100, null=True)),
                ('componentiswelded', models.IntegerField(blank=True, db_column='ComponentIsWelded', default=0, null=True)),
                ('tankismaintained', models.IntegerField(blank=True, db_column='TankIsMaintained', default=0, null=True)),
            ],
            options={
                'db_table': 'rw_equipment',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwExtcorTemperature',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('minus12tominus8', models.FloatField(blank=True, db_column='Minus12ToMinus8', null=True)),
                ('minus8toplus6', models.FloatField(blank=True, db_column='Minus8ToPlus6', null=True)),
                ('plus6toplus32', models.FloatField(blank=True, db_column='Plus6ToPlus32', null=True)),
                ('plus32toplus71', models.FloatField(blank=True, db_column='Plus32ToPlus71', null=True)),
                ('plus71toplus107', models.FloatField(blank=True, db_column='Plus71ToPlus107', null=True)),
                ('plus107toplus121', models.FloatField(blank=True, db_column='Plus107ToPlus121', null=True)),
                ('plus121toplus135', models.FloatField(blank=True, db_column='Plus121ToPlus135', null=True)),
                ('plus135toplus162', models.FloatField(blank=True, db_column='Plus135ToPlus162', null=True)),
                ('plus162toplus176', models.FloatField(blank=True, db_column='Plus162ToPlus176', null=True)),
                ('morethanplus176', models.FloatField(blank=True, db_column='MoreThanPlus176', null=True)),
            ],
            options={
                'db_table': 'rw_extcor_temperature',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwFullFcof',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('fcofvalue', models.FloatField(blank=True, db_column='FCoFValue', null=True)),
                ('fcofcategory', models.CharField(blank=True, db_column='FCoFCategory', max_length=50, null=True)),
                ('ail', models.IntegerField(blank=True, db_column='AIL', null=True)),
                ('envcost', models.FloatField(blank=True, null=True)),
                ('equipcost', models.FloatField(blank=True, null=True)),
                ('prodcost', models.FloatField(blank=True, null=True)),
                ('popdens', models.FloatField(blank=True, null=True)),
                ('injcost', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rw_full_fcof',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwFullPof',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('thinningap1', models.FloatField(blank=True, db_column='ThinningAP1', null=True)),
                ('thinningap2', models.FloatField(blank=True, db_column='ThinningAP2', null=True)),
                ('thinningap3', models.FloatField(blank=True, db_column='ThinningAP3', null=True)),
                ('sccap1', models.FloatField(blank=True, db_column='SCCAP1', null=True)),
                ('sccap2', models.FloatField(blank=True, db_column='SCCAP2', null=True)),
                ('sccap3', models.FloatField(blank=True, db_column='SCCAP3', null=True)),
                ('externalap1', models.FloatField(blank=True, db_column='ExternalAP1', null=True)),
                ('externalap2', models.FloatField(blank=True, db_column='ExternalAP2', null=True)),
                ('externalap3', models.FloatField(blank=True, db_column='ExternalAP3', null=True)),
                ('brittleap1', models.FloatField(blank=True, db_column='BrittleAP1', null=True)),
                ('brittleap2', models.FloatField(blank=True, db_column='BrittleAP2', null=True)),
                ('brittleap3', models.FloatField(blank=True, db_column='BrittleAP3', null=True)),
                ('htha_ap1', models.FloatField(blank=True, db_column='HTHA_AP1', null=True)),
                ('htha_ap2', models.FloatField(blank=True, db_column='HTHA_AP2', null=True)),
                ('htha_ap3', models.FloatField(blank=True, db_column='HTHA_AP3', null=True)),
                ('fatigueap1', models.FloatField(blank=True, db_column='FatigueAP1', null=True)),
                ('fatigueap2', models.FloatField(blank=True, db_column='FatigueAP2', null=True)),
                ('fatigueap3', models.FloatField(blank=True, db_column='FatigueAP3', null=True)),
                ('fms', models.FloatField(blank=True, db_column='FMS', null=True)),
                ('thinningtype', models.CharField(blank=True, db_column='ThinningType', max_length=7, null=True)),
                ('gfftotal', models.FloatField(blank=True, db_column='GFFTotal', null=True)),
                ('thinninglocalap1', models.FloatField(blank=True, db_column='ThinningLocalAP1', null=True)),
                ('thinninglocalap2', models.FloatField(blank=True, db_column='ThinningLocalAP2', null=True)),
                ('thinninglocalap3', models.FloatField(blank=True, db_column='ThinningLocalAP3', null=True)),
                ('thinninggeneralap1', models.FloatField(blank=True, db_column='ThinningGeneralAP1', null=True)),
                ('thinninggeneralap2', models.FloatField(blank=True, db_column='ThinningGeneralAP2', null=True)),
                ('thinninggeneralap3', models.FloatField(blank=True, db_column='ThinningGeneralAP3', null=True)),
                ('totaldfap1', models.FloatField(blank=True, db_column='TotalDFAP1', null=True)),
                ('totaldfap2', models.FloatField(blank=True, db_column='TotalDFAP2', null=True)),
                ('totaldfap3', models.FloatField(blank=True, db_column='TotalDFAP3', null=True)),
                ('pofap1', models.FloatField(blank=True, db_column='PoFAP1', null=True)),
                ('pofap2', models.FloatField(blank=True, db_column='PoFAP2', null=True)),
                ('pofap3', models.FloatField(blank=True, db_column='PoFAP3', null=True)),
                ('pofap1category', models.CharField(blank=True, db_column='PoFAP1Category', max_length=50, null=True)),
                ('pofap2category', models.CharField(blank=True, db_column='PoFAP2Category', max_length=50, null=True)),
                ('pofap3category', models.CharField(blank=True, db_column='PoFAP3Category', max_length=50, null=True)),
            ],
            options={
                'db_table': 'rw_full_pof',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwInputCaLevel1',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('api_fluid', models.CharField(blank=True, db_column='API_FLUID', max_length=50, null=True)),
                ('system', models.CharField(blank=True, db_column='SYSTEM', max_length=50, null=True)),
                ('release_duration', models.CharField(blank=True, db_column='Release_Duration', max_length=50, null=True)),
                ('detection_type', models.CharField(blank=True, db_column='Detection_Type', max_length=50, null=True)),
                ('isulation_type', models.CharField(blank=True, db_column='Isulation_Type', max_length=50, null=True)),
                ('mitigation_system', models.CharField(blank=True, db_column='Mitigation_System', max_length=150, null=True)),
                ('equipment_cost', models.FloatField(blank=True, db_column='Equipment_Cost', null=True)),
                ('injure_cost', models.FloatField(blank=True, db_column='Injure_Cost', null=True)),
                ('evironment_cost', models.FloatField(blank=True, db_column='Evironment_Cost', null=True)),
                ('toxic_percent', models.FloatField(blank=True, db_column='Toxic_Percent', null=True)),
                ('personal_density', models.FloatField(blank=True, db_column='Personal_Density', null=True)),
                ('material_cost', models.FloatField(blank=True, db_column='Material_Cost', null=True)),
                ('production_cost', models.FloatField(blank=True, db_column='Production_Cost', null=True)),
                ('mass_inventory', models.FloatField(blank=True, db_column='Mass_Inventory', null=True)),
                ('mass_component', models.FloatField(blank=True, db_column='Mass_Component', null=True)),
                ('stored_pressure', models.FloatField(blank=True, db_column='Stored_Pressure', null=True)),
                ('stored_temp', models.FloatField(blank=True, db_column='Stored_Temp', null=True)),
            ],
            options={
                'db_table': 'rw_input_ca_level1',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwInputCaTank',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('fluid_height', models.FloatField(blank=True, db_column='FLUID_HEIGHT', null=True)),
                ('shell_course_height', models.FloatField(blank=True, db_column='SHELL_COURSE_HEIGHT', null=True)),
                ('tank_diametter', models.FloatField(blank=True, db_column='TANK_DIAMETTER', null=True)),
                ('prevention_barrier', models.IntegerField(blank=True, db_column='Prevention_Barrier', default=0, null=True)),
                ('environ_sensitivity', models.CharField(blank=True, db_column='Environ_Sensitivity', max_length=50, null=True)),
                ('p_lvdike', models.FloatField(blank=True, db_column='P_lvdike', null=True)),
                ('p_onsite', models.FloatField(blank=True, db_column='P_onsite', null=True)),
                ('p_offsite', models.FloatField(blank=True, db_column='P_offsite', null=True)),
                ('soil_type', models.CharField(blank=True, db_column='Soil_Type', max_length=150, null=True)),
                ('tank_fluid', models.CharField(blank=True, db_column='TANK_FLUID', max_length=150, null=True)),
                ('api_fluid', models.CharField(blank=True, db_column='API_FLUID', max_length=50, null=True)),
                ('sw', models.FloatField(blank=True, db_column='SW', null=True)),
                ('productioncost', models.FloatField(blank=True, db_column='ProductionCost', null=True)),
            ],
            options={
                'db_table': 'rw_input_ca_tank',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwMaterial',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('materialname', models.CharField(blank=True, db_column='MaterialName', max_length=100, null=True)),
                ('designpressure', models.FloatField(blank=True, db_column='DesignPressure', null=True)),
                ('designtemperature', models.FloatField(blank=True, db_column='DesignTemperature', null=True)),
                ('mindesigntemperature', models.FloatField(blank=True, db_column='MinDesignTemperature', null=True)),
                ('brittlefracturethickness', models.FloatField(blank=True, db_column='BrittleFractureThickness', null=True)),
                ('corrosionallowance', models.FloatField(blank=True, db_column='CorrosionAllowance', null=True)),
                ('sigmaphase', models.FloatField(blank=True, db_column='SigmaPhase', null=True)),
                ('sulfurcontent', models.CharField(blank=True, db_column='SulfurContent', max_length=50, null=True)),
                ('heattreatment', models.CharField(blank=True, db_column='HeatTreatment', max_length=50, null=True)),
                ('referencetemperature', models.FloatField(blank=True, db_column='ReferenceTemperature', null=True)),
                ('ptamaterialcode', models.CharField(blank=True, db_column='PTAMaterialCode', max_length=70, null=True)),
                ('hthamaterialcode', models.CharField(blank=True, db_column='HTHAMaterialCode', max_length=50, null=True)),
                ('ispta', models.IntegerField(blank=True, db_column='IsPTA', default=0, null=True)),
                ('ishtha', models.IntegerField(blank=True, db_column='IsHTHA', default=0, null=True)),
                ('austenitic', models.IntegerField(blank=True, db_column='Austenitic', default=0, null=True)),
                ('temper', models.IntegerField(blank=True, db_column='Temper', default=0, null=True)),
                ('carbonlowalloy', models.IntegerField(blank=True, db_column='CarbonLowAlloy', default=0, null=True)),
                ('nickelbased', models.IntegerField(blank=True, db_column='NickelBased', default=0, null=True)),
                ('chromemoreequal12', models.IntegerField(blank=True, db_column='ChromeMoreEqual12', default=0, null=True)),
                ('allowablestress', models.FloatField(blank=True, db_column='AllowableStress', null=True)),
                ('costfactor', models.FloatField(blank=True, db_column='CostFactor', null=True)),
            ],
            options={
                'db_table': 'rw_material',
                'ordering': ('id',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RwStream',
            fields=[
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='cloud.RwAssessment')),
                ('aminesolution', models.CharField(blank=True, db_column='AmineSolution', max_length=50, null=True)),
                ('aqueousoperation', models.IntegerField(blank=True, db_column='AqueousOperation', default=0, null=True)),
                ('aqueousshutdown', models.IntegerField(blank=True, db_column='AqueousShutdown', default=0, null=True)),
                ('toxicconstituent', models.IntegerField(blank=True, db_column='ToxicConstituent', default=0, null=True)),
                ('caustic', models.IntegerField(blank=True, db_column='Caustic', default=0, null=True)),
                ('chloride', models.FloatField(blank=True, db_column='Chloride', null=True)),
                ('co3concentration', models.FloatField(blank=True, db_column='CO3Concentration', null=True)),
                ('cyanide', models.IntegerField(blank=True, db_column='Cyanide', default=0, null=True)),
                ('exposedtogasamine', models.IntegerField(blank=True, db_column='ExposedToGasAmine', default=0, null=True)),
                ('exposedtosulphur', models.IntegerField(blank=True, db_column='ExposedToSulphur', default=0, null=True)),
                ('exposuretoamine', models.CharField(blank=True, db_column='ExposureToAmine', max_length=50, null=True)),
                ('h2s', models.IntegerField(blank=True, db_column='H2S', default=0, null=True)),
                ('h2sinwater', models.FloatField(blank=True, db_column='H2SInWater', null=True)),
                ('hydrogen', models.IntegerField(blank=True, db_column='Hydrogen', default=0, null=True)),
                ('h2spartialpressure', models.FloatField(blank=True, db_column='H2SPartialPressure', null=True)),
                ('hydrofluoric', models.IntegerField(blank=True, db_column='Hydrofluoric', default=0, null=True)),
                ('materialexposedtoclint', models.IntegerField(blank=True, db_column='MaterialExposedToClInt', default=0, null=True)),
                ('maxoperatingpressure', models.FloatField(blank=True, db_column='MaxOperatingPressure', null=True)),
                ('maxoperatingtemperature', models.FloatField(blank=True, db_column='MaxOperatingTemperature', null=True)),
                ('minoperatingpressure', models.FloatField(blank=True, db_column='MinOperatingPressure', null=True)),
                ('minoperatingtemperature', models.FloatField(blank=True, db_column='MinOperatingTemperature', null=True)),
                ('criticalexposuretemperature', models.FloatField(blank=True, db_column='CriticalExposureTemperature', null=True)),
                ('naohconcentration', models.FloatField(blank=True, db_column='NaOHConcentration', null=True)),
                ('releasefluidpercenttoxic', models.FloatField(blank=True, db_column='ReleaseFluidPercentToxic', null=True)),
                ('waterph', models.FloatField(blank=True, db_column='WaterpH', null=True)),
                ('tankfluidname', models.CharField(blank=True, db_column='TankFluidName', max_length=50, null=True)),
                ('fluidheight', models.FloatField(blank=True, db_column='FluidHeight', null=True)),
                ('fluidleavedikepercent', models.FloatField(blank=True, db_column='FluidLeaveDikePercent', null=True)),
                ('fluidleavedikeremainonsitepercent', models.FloatField(blank=True, db_column='FluidLeaveDikeRemainOnSitePercent', null=True)),
                ('fluidgooffsitepercent', models.FloatField(blank=True, db_column='FluidGoOffSitePercent', null=True)),
            ],
            options={
                'db_table': 'rw_stream',
                'ordering': ('id',),
                'managed': False,
            },
        ),
    ]
